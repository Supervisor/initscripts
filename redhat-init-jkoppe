#!/bin/bash
#
# supervisord   This scripts turns supervisord on
#
# Author:       Mike McGrath <mmcgrath@redhat.com> (based off yumupdatesd)
#               Jason Koppe <jkoppe@indeed.com> adjusted to read sysconfig,
#                   use supervisord tools to start/stop, conditionally wait
#                   for child processes to shutdown, and startup later
#               Cameron Kerr <cameron.kerr.nz@gmail.com> adjusted 'status'
#                   to return an LSB-compliant return code so things like
#                   Ansible will be able to idempotently ensure service is
#                   up or down as desired.
#
# chkconfig:    345 83 04
#
# description:  supervisor is a process control utility.  It has a web based
#               xmlrpc interface as well as a few other nifty features.
# processname:  supervisord
# config: /etc/supervisord.conf
# pidfile: /var/run/supervisord.pid
#

# Treat unset variables as error
set -o nounset

# source function library
. /etc/rc.d/init.d/functions

# source system settings
[ -e /etc/sysconfig/supervisord ] && . /etc/sysconfig/supervisord

RETVAL=0

start() {
    echo "Starting supervisord: "
	if [ -e $PIDFILE ]; then 
		echo "ALREADY STARTED"
		return 1
	fi

	# start supervisord with options from sysconfig (stuff like -c)
    /usr/bin/supervisord $OPTIONS
	
	# show initial startup status
	/usr/bin/supervisorctl $OPTIONS status
	
	# only create the subsyslock if we created the PIDFILE
    [ -e $PIDFILE ] && touch /var/lock/subsys/supervisord
}

stop() {
    echo -n "Stopping supervisord: "
    /usr/bin/supervisorctl $OPTIONS shutdown
	if [ -n "$WAIT_FOR_SUBPROCESSES" ]; then 
        echo "Waiting roughly 60 seconds for $PIDFILE to be removed after child processes exit"
        for sleep in  2 2 2 2 4 4 4 4 8 8 8 8 last; do
            if [ ! -e $PIDFILE ] ; then
                echo "Supervisord exited as expected in under $total_sleep seconds"
                break
            else
                if [[ $sleep = "last" ]] ; then
                    echo "Supervisord still working on shutting down. We've waited roughly 60 seconds, we'll let it do its thing from here"
                    return 1
                else
                    sleep $sleep
                    total_sleep=$(( $total_sleep + $sleep ))
                fi

            fi
        done
    fi

    # always remove the subsys.  we might have waited a while, but just remove it at this point.
    rm -f /var/lock/subsys/supervisord
}

restart() {
        stop
        start
}

case "$1" in
    start)
        start
        RETVAL=$?
        ;;
    stop)
        stop
        RETVAL=$?
        ;;
    restart|force-reload)
        restart
        RETVAL=$?
        ;;
    reload)
        /usr/bin/supervisorctl $OPTIONS reload
        RETVAL=$?
        ;;
    condrestart)
        [ -f /var/lock/subsys/supervisord ] && restart
        RETVAL=$?
        ;;
    status)
        /usr/bin/supervisorctl $OPTIONS status
        status -p $PIDFILE supervisord
        # The 'status' option should return one of the LSB-defined return-codes,
        # in particular, return-code 3 should mean that the service is not
        # currently running. This is particularly important for Ansible's 'service'
        # module, as without this behaviour it won't know if a service is up or down.
        RETVAL=$?
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|reload|force-reload|condrestart}"
        exit 1
esac

exit $RETVAL
